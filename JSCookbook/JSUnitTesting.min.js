var JsUnitTesting;(JsUnitTesting=JsUnitTesting||{}).Assert=function(t){if(void 0===t||null===t||"object"!=typeof t||!(t instanceof JsUnitTesting.TestContext))throw"First argument must be of type JsUnitTesting.TestContext.";this.__testContext__=t},JsUnitTesting.Assert.ErrorNumbers=new Array("indeterminate","fail","isUndefined","isDefined","isNull","isNotNull","isNullOrUndefined","isNotNullAndDefined","isNotANumber","isANumber","isString","isNotString","isEmpty","isNotEmpty","isInstanceOf","areEqual","areNotEqual","isLessThan","isGreaterThan","isNotLessThan","isNotGreaterThan"),JsUnitTesting.Assert.prototype.__throw__=function(t,e,i){throw new JsUnitTesting.AssertionError(JsUnitTesting.Assert.ErrorNumbers.indexOf(t),e,this.__testContext__.getTestName(),this.__testContext__.getCollectionName(),errorObj)},JsUnitTesting.Assert.prototype.indeterminate=function(t,e){this.__throw__("indeterminate",t,errorObj)},JsUnitTesting.Assert.prototype.fail=function(t,e){this.__throw__("fail",t,e)},JsUnitTesting.Assert.prototype.isUndefined=function(t,e){void 0!==t&&this.__throw__("isUndefined",JsUnitTesting.Utility.convertToString(e,"Actual value is defined"))},JsUnitTesting.Assert.prototype.isDefined=function(t,e){void 0===t&&this.__throw__("isDefined",JsUnitTesting.Utility.convertToString(e,"Actual value is not defined"))},JsUnitTesting.Assert.prototype.isNull=function(t,e){null!==t&&this.__throw__("isNull",JsUnitTesting.Utility.convertToString(e,"Actual value is not null"))},JsUnitTesting.Assert.prototype.isNotNull=function(t,e){null===t&&this.__throw__("isNotNull",JsUnitTesting.Utility.convertToString(e,"Actual value is null"))},JsUnitTesting.Assert.prototype.isNullOrUndefined=function(t,e){void 0===t&&null===t||this.__throw__("isNullOrUndefined",JsUnitTesting.Utility.convertToString(e,"Actual value is not null or undefined"))},JsUnitTesting.Assert.prototype.isNotNullAndDefined=function(t,e){null===t&&this.__throw__("isNotNullAndDefined",JsUnitTesting.Utility.convertToString(e,"Actual value is null or undefined"))},JsUnitTesting.Assert.prototype.isNotANumber=function(t,e){isNan(t)||this.__throw__("isNotANumber",JsUnitTesting.Utility.convertToString(e,"Actual value is a number"))},JsUnitTesting.Assert.prototype.isANumber=function(t,e){isNan(t)&&this.__throw__("isANumber",JsUnitTesting.Utility.convertToString(e,"Actual value is  not a number"))},JsUnitTesting.Assert.prototype.isString=function(t,e){"string"!=typeof t&&this.__throw__("isString",JsUnitTesting.Utility.convertToString(e,"Actual value is not a string type"))},JsUnitTesting.Assert.prototype.isNotString=function(t,e){"string"==typeof t&&this.__throw__("isString",JsUnitTesting.Utility.convertToString(e,"Actual value is a string type"))},JsUnitTesting.Assert.prototype.isEmpty=function(t,e,i){var n;try{if(void 0===t||null===t)n=!0;else{var s="string"!=typeof expectedClass?t:String(t);n=0==(i?JsUnitTesting.Utility.trimString(s):s).length}}catch(e){JsUnitTesting.Assert.prototype.indeterminate("Unable to convert"+typeof t+" to a string.",e)}n||this.__throw__("isEmpty",JsUnitTesting.Utility.convertToString(e,"Actual is not empty"))},JsUnitTesting.Assert.prototype.isNotEmpty=function(t,e,i){var n;try{if(void 0===t||null===t)n=!1;else{var s="string"!=typeof expectedClass?t:String(t);n=0!=(i?JsUnitTesting.Utility.trimString(s):s).length}}catch(e){JsUnitTesting.Assert.prototype.indeterminate("Unable to convert"+typeof t+" to a string.",e)}n||this.__throw__("isNotEmpty",JsUnitTesting.Utility.convertToString(e,"Actual is empty"))},JsUnitTesting.Assert.prototype.isInstanceOf=function(t,e,i){var n;try{if("function"!=typeof t)throw"First parameter must be a class (function)";n="object"==typeof e&&e instanceof t}catch(t){JsUnitTesting.Assert.prototype.indeterminate("Unable to determine if expected type "+typeof expectedValue+" is equal to actual type "+typeof e+".",t)}n||this.__throw__("areEqual",JsUnitTesting.Utility.convertToString(i,"Actual value does not match the expected value"))},JsUnitTesting.Assert.prototype.areEqual=function(t,e,i){var n;try{n=t==e}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to determine if expected type "+typeof t+" is equal to actual type "+typeof e+".",i)}n||this.__throw__("areEqual",JsUnitTesting.Utility.convertToString(i,"Actual value does not match the expected value"))},JsUnitTesting.Assert.prototype.areNotEqual=function(t,e,i){var n;try{n=t!=e}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to determine if expected type "+typeof t+" is equal to actual type "+typeof e+".",i)}n||this.__throw__("areNotEqual",JsUnitTesting.Utility.convertToString(i,"Actual value matches the expected value"))},JsUnitTesting.Assert.prototype.isLessThan=function(t,e,i){var n;try{n=e<t}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to compare maximum exclusive type "+typeof t+" to actual type "+typeof e+".",i)}n||this.__throw__("isLessThan",JsUnitTesting.Utility.convertToString(i,"Actual value is not less than the maximum exclusive value"))},JsUnitTesting.Assert.prototype.isGreaterThan=function(t,e,i){var n;try{n=e>t}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to compare minimum exclusive type "+typeof t+" to actual type "+typeof e+".",i)}n||this.__throw__("isGreaterThan",JsUnitTesting.Utility.convertToString(i,"Actual value is not greater than the minimum exclusive value"))},JsUnitTesting.Assert.prototype.isNotLessThan=function(t,e,i){var n;try{n=e>=t}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to compare minimum inclusive type "+typeof t+" to actual type "+typeof e+".",i)}n||this.__throw__("isNotLessThan",JsUnitTesting.Utility.convertToString(i,"Actual value is less than the minimum inclusive value"))},JsUnitTesting.Assert.prototype.isNotGreaterThan=function(t,e,i){var n;try{n=e<=t}catch(i){JsUnitTesting.Assert.prototype.indeterminate("Unable to compare maximum inclusive type "+typeof t+" to actual type "+typeof e+".",i)}n||this.__throw__("isNotGreaterThan",JsUnitTesting.Utility.convertToString(i,"Actual value is greater than the maximum inclusive value"))},(JsUnitTesting=JsUnitTesting||{}).AssertionError=function(t,e,i,n,s){var r=e,o=typeof r;r="undefined"===o||null===r?"":("string"===o?r:r+"").trim();var a=t;if("undefined"===(o=typeof a)||null===r)a=Number.NaN;else if("number"!==o)try{a=parseInt(a)}catch(t){a=Number.NaN}!isNaN(a)&&Number.isFinite(a)?r=0==r.length?"Error "+a:"Error "+a+": "+r:0==r.length&&(r="Unexpected Error"),Error.prototype.constructor.call(this,r),this.errorNumber=a,void 0!==s&&null!==s&&(this.innerError=s),void 0!==i&&null!==i&&(void 0!==i.id&&null!==i.id&&(this.unitTestId=i.id),void 0!==i.name&&null!==i.name&&(this.unitTestName=i.name)),void 0!==n&&null!==n&&(void 0!==n.id&&null!==n.id&&(this.testCollectionId=n.id),void 0!==n.name&&null!==n.name&&(this.testCollectionName=unittestCollectionTest.name))},JsUnitTesting.AssertionError.prototype=Error.prototype,JsUnitTesting.AssertionError.prototype.constructor=JsUnitTesting.AssertionError;